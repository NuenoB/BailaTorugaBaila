#!/usr/bin/env python
# license removed for brevity
import rospy
from nav_msgs.msg import Odometry
from sensor_msgs.msg import JointState
from geometry_msgs.msg import Twist
from tf.transformations import euler_from_quaternion
import time
import math

#pos=0 #borrar
x_speed = 0.2  # velocidad 
Angle=0 # Angulo actual
maxDist = 0.1 #distancia max
Dis = 0 # distancia al punto unicial

def stopAStep(twist,pub):
    twist.linear.x = 0;
    twist.angular.z = 0;
    rospy.loginfo("Stop "+str(twist))
    pub.publish(twist)
    time.sleep(0.5)

def adelante(twist, pub, rate):
    global Dis
    twist.linear.x = x_speed;
    twist.angular.z = 0;
    counter = 0
    obj=Dis+maxDist
    while ((not rospy.is_shutdown()) and (abs(obj-Dis)>0.2)):
        rospy.loginfo("obj: " + str(obj) + " Dis: " + str(Dis) +" delta: " + str(abs(obj-Dis)))
        rospy.loginfo(twist)
        pub.publish(twist)
        rate.sleep()
    stopAStep(twist,pub)

def atras(twist, pub, rate):
    global Dis
    rospy.loginfo("Atras")
    counter = 0
    obj=abs(Dis-maxDist)
    twist.linear.x=-x_speed
    rospy.loginfo("Atras")
    while ((not rospy.is_shutdown()) and (abs(obj-Dis)>0.2)):
        rospy.loginfo("obj: " + str(obj) + " Dis: " + str(Dis) +" delta: " + str(abs(obj-Dis)))
        pub.publish(twist)
        rate.sleep()
    stopAStep(twist,pub)

def detGiro(grados):
    global Angle
    algo=grados- Angle
    if ((algo<180 and algo>0) or algo<-180):
	return 1
    else:
        return -1


#obj debe estar en grados normales
def girar(twist, pub, rate,obj):
    if (obj<0):
       obj=obj+360
    global Angle
    twist.linear.x=0.0
    twist.linear.y=0.0
    twist.angular.z=0.6*detGiro(obj)

    while ((not rospy.is_shutdown()) and (abs(obj-Angle)>5.0)):
        rospy.loginfo("obj: " + str(obj) + " angulo: " + str(Angle) +" delta: " + str(abs(obj-Angle)))
        #rospy.loginfo(twist)
        pub.publish(twist)
        rate.sleep()
    stopAStep(twist,pub)

def reciver_odom(data):
    global Angle
    global Dis
    rospy.loginfo
    pose=data.pose.pose
    quaternion = (
    pose.orientation.x,
    pose.orientation.y,
    pose.orientation.z,
    pose.orientation.w)
    (roll , pitch , yaw) = euler_from_quaternion(quaternion)
    tAngle = math.degrees(yaw)
    if (tAngle<0):
       tAngle = tAngle+360
    Angle = tAngle
    Dis = math.sqrt(pow(data.pose.pose.position.x,2)+pow(data.pose.pose.position.y,2))
    #rospy.loginfo("odom "+str(Dis))

#def reciver_joint_states(algo):
#    global pos
#    rospy.loginfo(pos)
#    pos=algo.position

def dancer():
    global x_speed
    global pos
    pub = rospy.Publisher('cmd_vel_mux/input/teleop', Twist, queue_size=10)
#    rospy.Subscriber("joint_states",JointState, reciver_joint_states)
    rospy.Subscriber('odom',Odometry, reciver_odom)
    rospy.init_node('Baile', anonymous=True)
    rate = rospy.Rate(10) # 10hz
    twist = Twist()
    twist.linear.x = x_speed;
    giro = 180
    girar(twist, pub, rate,giro)
    while(1==1):
        girar(twist, pub, rate,giro+45)
        adelante(twist, pub, rate)
        atras(twist, pub, rate)
	girar(twist, pub, rate,giro-45)
        adelante(twist, pub, rate)
        atras(twist, pub, rate)
        giro = (giro + 45) % 360
        
    
    

if __name__ == '__main__':
    try:
        dancer()
    except rospy.ROSInterruptException:
        pass
